{"componentChunkName":"component---src-templates-post-jsx","path":"/ci-cd/","result":{"data":{"site":{"siteMetadata":{"title":"방끗"}},"markdownRemark":{"id":"6f03a591-7638-5f66-8b37-c171d9f5ea9d","excerpt":"안녕하세요, 방끗팀의 백엔드 개발자 카피입니다😁 이번 글에서는 저희 팀이 처음으로 겪었던 CI/CD 과정에서의 트러블슈팅 경험을 소개하고자 합니다! 😀 CI/CD 도구 선택 과정 CI/CD 도구를 선택할 때 우선적으로 고려한 기준은 두 가지입니다. 첫째, 오버엔지니어링을 피하는 것입니다.\n기술의 장점이 무조건 좋다고 선택하는 것이 아니라, 그 장점이 현재…","html":"<blockquote>\n<p>안녕하세요, 방끗팀의 백엔드 개발자 카피입니다😁</p>\n</blockquote>\n<p>이번 글에서는 저희 팀이 처음으로 겪었던 CI/CD 과정에서의 트러블슈팅 경험을 소개하고자 합니다!</p>\n<h2 id=\"-CICD-도구-선택-과정\" style=\"position:relative;\"><a href=\"#-CICD-%EB%8F%84%EA%B5%AC-%EC%84%A0%ED%83%9D-%EA%B3%BC%EC%A0%95\" aria-label=\" CICD 도구 선택 과정 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>😀 CI/CD 도구 선택 과정</h2>\n<p>CI/CD 도구를 선택할 때 우선적으로 고려한 기준은 두 가지입니다.</p>\n<p>첫째, 오버엔지니어링을 피하는 것입니다.\n기술의 장점이 무조건 좋다고 선택하는 것이 아니라, 그 장점이 현재 우리의 상황에 적합한지가 중요하다고 생각했습니다.</p>\n<p>둘째, 러닝 커브가 높지 않은 기술인가입니다.\n스프린트의 마감 기한이 길지 않기 때문에 당장 도입하기 쉬운 기술을 선택하고 추후 리팩토링하는 방향을 선택했습니다.\n<Br></p>\n<p>여러가지 CI/CD 도구들을 간단히 비교하면서 가장 적합한 도구가 무엇인지 생각해 보았습니다!</p>\n<h3 id=\"Github-Action\" style=\"position:relative;\"><a href=\"#Github-Action\" aria-label=\"Github Action permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Github Action</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>별도 설치가 필요 없다</li>\n<li>비교적 간단하게 워크플로우를 설치 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>Jenkins에 비해 일부 고급 기능, 플러그인이 부족할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Jenkins\" style=\"position:relative;\"><a href=\"#Jenkins\" aria-label=\"Jenkins permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Jenkins</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>설정을 통해 세밀한 파이프라인 구축이 가능하다.</li>\n<li>참고할 수 있는 다양한 문서와 자료가 제공된다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>별도의 서버에 직접 구축을 해야한다.</li>\n<li>Github action에 비해 러닝커브가 높다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CodeDeploy\" style=\"position:relative;\"><a href=\"#CodeDeploy\" aria-label=\"CodeDeploy permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>CodeDeploy</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>여러 EC2에 배포를 간단하게 할 수 있다.</li>\n<li>무중단 배포 기능이 내장되어 있어 쉽게 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>CodeDeploy를 사용함에 따라 인프라 구조가 복잡해진다.</li>\n</ul>\n</li>\n</ul>\n<p>결론부터 말씀드리자면, 저희 팀은 백엔드 CI/CD 파이프라인 구성을 위해 GitHub Actions를 사용하기로 결정했습니다. 😀</p>\n<p>GitHub Actions는 CI/CD에 익숙하지 않은 팀원들도 비교적 빠르게 이해할 수 있을 것으로 판단했습니다. 또한, 프로젝트 규모를 고려했을 때, 사용할 EC2 인스턴스는 운영용과 개발용 각각 2대가 될 것으로 예상하여, 복잡한 인프라 구조는 필요하지 않다고 보았습니다.</p>\n<p>따라서, GitHub Actions를 통해 간단하고 신속하게 인프라를 구축하기로 결정했습니다. 😉</p>\n<h2 id=\"-쉽지-않았던-파이프라인-구축기\" style=\"position:relative;\"><a href=\"#-%EC%89%BD%EC%A7%80-%EC%95%8A%EC%95%98%EB%8D%98-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0\" aria-label=\" 쉽지 않았던 파이프라인 구축기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>😂 쉽지 않았던 파이프라인 구축기</h2>\n<p>우테코에서 CI/CD를 구축하는 환경은 일반적인 프로젝트를 진행할 때와는 다르게 제약사항이 있었습니다.</p>\n<p>바로 ec2 보안 그룹 설정에서 80, 443 포트를 제외한 외부 접근을 막고 있다는 것입니다. 이런 제약사항으로 인해 CD를 구축할 때 시도한 여러 방법들이 실패하게 되었는데 하나하나 살펴보겠습니다!</p>\n<h3 id=\"1-ec2-ssh-접근\" style=\"position:relative;\"><a href=\"#1-ec2-ssh-%EC%A0%91%EA%B7%BC\" aria-label=\"1 ec2 ssh 접근 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. ec2 ssh 접근</h3>\n<p>가장 먼저 시도해본 방식은 ec2에 <code class=\"language-text\">scp-action</code>을 통해 build된 jar 파일을 전송하고, <code class=\"language-text\">ssh-action</code>을 사용해 ec2에 접속하여 리눅스 명령어로 jar 파일을 실행시키는 방식입니다.</p>\n<p>이 방식을 사용했을 때 다음과 같은 에러 메세지를 받았습니다.</p>\n<img src='https://velog.velcdn.com/images/banggood/post/7eb49fd5-6190-48fd-8543-7e310deca296/image.png'>\n<p>기본적으로 <code class=\"language-text\">scp-action</code>, 'ssh-action`은 22번 포트로 요청을 보내기 때문에 ec2의 보안 규칙에 막혀 timeout 에러를 발생시킨 것이죠!</p>\n<p>cf) 글을 작성하면서 든 생각인데, 기본 포트가 22번이라면 80, 443으로 설정했을 때 작동하는지 추후 테스트가 필요할 것 같네요!</p>\n<h3 id=\"2-s3에-jar-파일-저장\" style=\"position:relative;\"><a href=\"#2-s3%EC%97%90-jar-%ED%8C%8C%EC%9D%BC-%EC%A0%80%EC%9E%A5\" aria-label=\"2 s3에 jar 파일 저장 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. s3에 jar 파일 저장</h3>\n<p>S3에 JAR 파일을 저장하는 방식도 시도해보았습니다.</p>\n<p>그러나 AWS IAM의 Access Key가 필요한데, 보안상의 이유로 우테코에서는 Access Key를 제공하지 않아서 해당 방식을 빠르게 포기했습니다.</p>\n<h3 id=\"3-도커-허브-사용\" style=\"position:relative;\"><a href=\"#3-%EB%8F%84%EC%BB%A4-%ED%97%88%EB%B8%8C-%EC%82%AC%EC%9A%A9\" aria-label=\"3 도커 허브 사용 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. 도커 허브 사용</h3>\n<p>도커 허브에 jar 파일을 업로드하고, ec2에 다운받아 배포하는 방식도 고려해보았습니다!</p>\n<p>하지만 도커 허브에 올라간 jar 파일이 public으로 열려있기 때문에 다른 사용자들이 열람할 수 있다는 점에서 보안상의 이슈가 있을 수 있다고 생각했습니다.\n또한 현재 서비스의 규모 상 도커 기술을 사용하는 것에 대한 필요성을 느끼지 못하였기 때문에 도커는 사용하지 않기로 결정했습니다😀</p>\n<h3 id=\"4-깃허브-self-hosted-runner\" style=\"position:relative;\"><a href=\"#4-%EA%B9%83%ED%97%88%EB%B8%8C-self-hosted-runner\" aria-label=\"4 깃허브 self hosted runner permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>4. 깃허브 self-hosted runner</h3>\n<p>결론적으로 CD 워크플로를 구성할 때 깃허브의 Runner를 사용하기로 결정했습니다😁</p>\n<p>러너는 GitHub Actions 워크플로를 실행하는 서버 역할을 합니다.\n기본적으로 러너의 종류는 크게 Github-hosted runner와 Self-hosted runner 두 가지로 구분할 수 있습니다.</p>\n<p>그 중 저희가 사용한 러너는 Self-hosted runner 입니다!</p>\n<p>러너를 직접 ec2 내부에 설치함으로써 깃허브 저장소와의 연결이 가능하게 만들었습니다.</p>\n<p>간단하게 CD를 위해 러너가 사용된 방식을 설명드리면,</p>\n<ol>\n<li>깃허브 artifact 저장소에 build된 jar 파일 업로드</li>\n<li>ec2 내부의 러너가 artifact 저장소에 있는 jar 파일 다운로드</li>\n<li>jar 파일 실행</li>\n</ol>\n<p>이런 과정을 통해 CD가 정상적으로 수행되었지만, 궁금한 점이 남아있었습니다.</p>\n<p><strong>어떻게 러너는 ec2 내부에서 깃허브 저장소와 소통을 하는 거지?</strong></p>\n<p>이에 대한 해답은 공식문서를 통해 찾아낼 수 있었습니다!</p>\n<img src='https://velog.velcdn.com/images/banggood/post/a55508a0-e884-42bf-b01a-8e35f1596cd2/image.png'>\n<p>Self-hosted runner의 동작 방식을 살펴보면 50초 동안 long poll 방식으로 깃허브의 응답을 기다립니다.\n만약 Github action에서 작업이 실행되어 러너에게 요청을 보내면 이 요청은 443 포트로 넘어오게 되고, 이는 현재 ec2에 열려 있는 443포트를 통해 러너로 들어올 수 있게 됩니다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>결론</h2>\n<p>지금까지 어떤 과정을 통해 CICD 파이프라인을 구축했는지 살펴봤습니다!\n여러 제약사항이 있는 상황 속에서 방법을 찾아내는 것이 쉽지만은 않았지만 꼭 필요한 과정이었던 것 같습니다.\n현재 상황에서는 이 방식이 최선이라 생각하지만, 서버가 늘어나고 여러 환경 요인이 변화하면 파이프라인도 수정이 필요할 것 같습니다!\n파이프라인 구축기는 그 때 다시 돌아오겠습니다😀</p>","frontmatter":{"title":"CI/CD 파이프라인 구축기","date":"May 04, 2024","update":"May 04, 2024","tags":["backend","ci/cd"],"series":""},"fields":{"slug":"/ci-cd/","readingTime":{"minutes":8.63}}},"seriesList":{"edges":[{"node":{"id":"6f03a591-7638-5f66-8b37-c171d9f5ea9d","fields":{"slug":"/ci-cd/"},"frontmatter":{"title":"CI/CD 파이프라인 구축기"}}}]},"previous":null,"next":null},"pageContext":{"id":"6f03a591-7638-5f66-8b37-c171d9f5ea9d","series":"","previousPostId":null,"nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}