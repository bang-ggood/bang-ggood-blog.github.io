{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"이번 글에서는 저희 팀이 처음으로 겪었던 CI/CD 과정에서의 트러블슈팅 경험을 소개하고자 합니다! 😀 CI/CD 도구 선택 과정 CI/CD 도구를 선택할 때 우선적으로 고려한 기준은 두 가지입니다. 첫째, 오버엔지니어링을 피하는 것입니다.\n기술의 장점이 무조건 좋다고 선택하는 것이 아니라, 그 장점이 현재 우리의 상황에 적합한지가 중요하다고 생각했습니다…","fields":{"slug":"/ci-cd/"},"frontmatter":{"date":"September 09, 2024","title":"CI/CD 파이프라인 구축기","tags":["backend","ci/cd"]},"rawMarkdownBody":"\n> 이번 글에서는 저희 팀이 처음으로 겪었던 CI/CD 과정에서의 트러블슈팅 경험을 소개하고자 합니다!\n\n## 😀 CI/CD 도구 선택 과정\n\nCI/CD 도구를 선택할 때 우선적으로 고려한 기준은 두 가지입니다.\n\n첫째, 오버엔지니어링을 피하는 것입니다.\n기술의 장점이 무조건 좋다고 선택하는 것이 아니라, 그 장점이 현재 우리의 상황에 적합한지가 중요하다고 생각했습니다.\n\n둘째, 러닝 커브가 높지 않은 기술인가입니다.\n스프린트의 마감 기한이 길지 않기 때문에 당장 도입하기 쉬운 기술을 선택하고 추후 리팩토링하는 방향을 선택했습니다.\n<Br>\n\n여러가지 CI/CD 도구들을 간단히 비교하면서 가장 적합한 도구가 무엇인지 생각해 보았습니다!\n\n### Github Action\n\n- 장점\n  - 별도 설치가 필요 없다\n  - 비교적 간단하게 워크플로우를 설치 가능하다.\n- 단점\n  - Jenkins에 비해 일부 고급 기능, 플러그인이 부족할 수 있다.\n\n### Jenkins\n\n- 장점\n  - 설정을 통해 세밀한 파이프라인 구축이 가능하다.\n  - 참고할 수 있는 다양한 문서와 자료가 제공된다.\n- 단점\n  - 별도의 서버에 직접 구축을 해야한다.\n  - Github action에 비해 러닝커브가 높다.\n\n### CodeDeploy\n\n- 장점\n  - 여러 EC2에 배포를 간단하게 할 수 있다.\n  - 무중단 배포 기능이 내장되어 있어 쉽게 가능하다.\n- 단점\n  - CodeDeploy를 사용함에 따라 인프라 구조가 복잡해진다.\n\n결론부터 말씀드리자면, 저희 팀은 백엔드 CI/CD 파이프라인 구성을 위해 GitHub Actions를 사용하기로 결정했습니다. 😀\n\nGitHub Actions는 CI/CD에 익숙하지 않은 팀원들도 비교적 빠르게 이해할 수 있을 것으로 판단했습니다. 또한, 프로젝트 규모를 고려했을 때, 사용할 EC2 인스턴스는 운영용과 개발용 각각 2대가 될 것으로 예상하여, 복잡한 인프라 구조는 필요하지 않다고 보았습니다.\n\n따라서, GitHub Actions를 통해 간단하고 신속하게 인프라를 구축하기로 결정했습니다. 😉\n\n## 😂 쉽지 않았던 파이프라인 구축기\n\n우테코에서 CI/CD를 구축하는 환경은 일반적인 프로젝트를 진행할 때와는 다르게 제약사항이 있었습니다.\n\n바로 ec2 보안 그룹 설정에서 80, 443 포트를 제외한 외부 접근을 막고 있다는 것입니다. 이런 제약사항으로 인해 CD를 구축할 때 시도한 여러 방법들이 실패하게 되었는데 하나하나 살펴보겠습니다!\n\n### 1. ec2 ssh 접근\n\n가장 먼저 시도해본 방식은 ec2에 `scp-action`을 통해 build된 jar 파일을 전송하고, `ssh-action`을 사용해 ec2에 접속하여 리눅스 명령어로 jar 파일을 실행시키는 방식입니다.\n\n이 방식을 사용했을 때 다음과 같은 에러 메세지를 받았습니다.\n\n<img src=\"https://velog.velcdn.com/images/banggood/post/7eb49fd5-6190-48fd-8543-7e310deca296/image.png\"/>\n\n기본적으로 `scp-action`, 'ssh-action`은 22번 포트로 요청을 보내기 때문에 ec2의 보안 규칙에 막혀 timeout 에러를 발생시킨 것이죠!\n\ncf) 글을 작성하면서 든 생각인데, 기본 포트가 22번이라면 80, 443으로 설정했을 때 작동하는지 추후 테스트가 필요할 것 같네요!\n\n### 2. s3에 jar 파일 저장\n\nS3에 JAR 파일을 저장하는 방식도 시도해보았습니다.\n\n그러나 AWS IAM의 Access Key가 필요한데, 보안상의 이유로 우테코에서는 Access Key를 제공하지 않아서 해당 방식을 빠르게 포기했습니다.\n\n### 3. 도커 허브 사용\n\n도커 허브에 jar 파일을 업로드하고, ec2에 다운받아 배포하는 방식도 고려해보았습니다!\n\n하지만 도커 허브에 올라간 jar 파일이 public으로 열려있기 때문에 다른 사용자들이 열람할 수 있다는 점에서 보안상의 이슈가 있을 수 있다고 생각했습니다.\n또한 현재 서비스의 규모 상 도커 기술을 사용하는 것에 대한 필요성을 느끼지 못하였기 때문에 도커는 사용하지 않기로 결정했습니다😀\n\n### 4. 깃허브 self-hosted runner\n\n결론적으로 CD 워크플로를 구성할 때 깃허브의 Runner를 사용하기로 결정했습니다😁\n\n러너는 GitHub Actions 워크플로를 실행하는 서버 역할을 합니다.\n기본적으로 러너의 종류는 크게 Github-hosted runner와 Self-hosted runner 두 가지로 구분할 수 있습니다.\n\n그 중 저희가 사용한 러너는 Self-hosted runner 입니다!\n\n러너를 직접 ec2 내부에 설치함으로써 깃허브 저장소와의 연결이 가능하게 만들었습니다.\n\n간단하게 CD를 위해 러너가 사용된 방식을 설명드리면,\n\n1. 깃허브 artifact 저장소에 build된 jar 파일 업로드\n2. ec2 내부의 러너가 artifact 저장소에 있는 jar 파일 다운로드\n3. jar 파일 실행\n\n이런 과정을 통해 CD가 정상적으로 수행되었지만, 궁금한 점이 남아있었습니다.\n\n**어떻게 러너는 ec2 내부에서 깃허브 저장소와 소통을 하는 거지?**\n\n이에 대한 해답은 공식문서를 통해 찾아낼 수 있었습니다!\n\n<img src=\"https://velog.velcdn.com/images/banggood/post/a55508a0-e884-42bf-b01a-8e35f1596cd2/image.png\"/>\n\nSelf-hosted runner의 동작 방식을 살펴보면 50초 동안 long poll 방식으로 깃허브의 응답을 기다립니다.\n만약 Github action에서 작업이 실행되어 러너에게 요청을 보내면 이 요청은 443 포트로 넘어오게 되고, 이는 현재 ec2에 열려 있는 443포트를 통해 러너로 들어올 수 있게 됩니다.\n\n## 결론\n\n지금까지 어떤 과정을 통해 CICD 파이프라인을 구축했는지 살펴봤습니다!\n여러 제약사항이 있는 상황 속에서 방법을 찾아내는 것이 쉽지만은 않았지만 꼭 필요한 과정이었던 것 같습니다.\n현재 상황에서는 이 방식이 최선이라 생각하지만, 서버가 늘어나고 여러 환경 요인이 변화하면 파이프라인도 수정이 필요할 것 같습니다!\n파이프라인 구축기는 그 때 다시 돌아오겠습니다😀\n"},{"excerpt":"웹 서비스를 개발하다보면 CORS 에러를 흔히 볼 수 있습니다. 설정을 제대로 해주지 않으면 프론트와 통신할 수 없기 때문에 CORS에 대해 제대로 이해하고 설정하는 것이 매우 중요합니다. 이번 포스팅에서는 방끗 팀이 겪었던 CORS 에러를 바탕으로 제대로된 CORS 설정에 대한 글을 작성하고자 합니다. CORS 에러 왜 발생해? CORS는 Cross-O…","fields":{"slug":"/cors/"},"frontmatter":{"date":"August 02, 2024","title":"CORS 설정","tags":["backend","infra"]},"rawMarkdownBody":"\n웹 서비스를 개발하다보면 CORS 에러를 흔히 볼 수 있습니다. 설정을 제대로 해주지 않으면 프론트와 통신할 수 없기 때문에 CORS에 대해 제대로 이해하고 설정하는 것이 매우 중요합니다. 이번 포스팅에서는 방끗 팀이 겪었던 CORS 에러를 바탕으로 제대로된 CORS 설정에 대한 글을 작성하고자 합니다.\n\n## CORS 에러 왜 발생해?\n\nCORS는 Cross-Origin Resource Sharing의 약자로 **교차 출처 리소스 공유**라는 뜻입니다. 단어 그자체로 보면 말이 참 어렵죠 😨\n\nCORS에서 가장 중요한 개념은 **출처(Origin)**입니다. Cross-Origin은 서로 출처가 다르다는 것을 의미합니다. 출처는 URL에서 **프로토콜과 도메인, 포트**까지 포함하는 개념입니다.\n\n<img src=\"https://github.com/user-attachments/assets/5b031b03-24e6-4d74-a67e-4cd636dc41f1\"/>\n\n방끗 서비스에서는 프론트와 백엔드가 서로 다른 도메인을 사용하고 있습니다.\n\n- 방끗 프론트 : [http://bang-ggood.com](http://bang-ggood.com/)\n- 방끗 백엔드 : [https://api.bang-ggood.com](https://api.bang-ggood.com/)\n\nCORS는 개념 그 자체로 보면 서로 다른 출처끼리 리소스를 공유할 수 있게 하기 때문에 긍정적인 개념이라고 할 수 있습니다. CORS 이전에 SOP라는 브라우저 정책이 있습니다. SOP는 **Same-Origin Policy**로 동일한 출처 사이에만 리소스를 공유할 수 있게 합니다. 이는 **CSRF**로부터 사용자를 보호하기 위해 등장한 중요한 보안 메커니즘이었습니다.\n\n예전에는 프론트와 백엔드를 따로 구성하지 않아 모든 처리가 같은 도메인 안에서 이루어졌습니다. 하지만 시간이 지나 프론트에서 API를 요청하기 시작하면서 프론트와 백엔드가 서로 다른 도메인에 있는 경우가 많아졌습니다. 이를 해결하기 위해 등장한 정책이 CORS입니다.\n\nCORS가 안전하게 동작하기 위해서는 서버에서 **허용 가능한 출처**에 대해 명시해주어야 합니다. 이를 제대로 설정해주지 않으면 클라이언트(Client)를 신뢰할 수 없어 브라우저단에서 에러를 내뿜습니다.\n\n## CORS 접근 시나리오\n\n그렇다면 CORS 에러를 막기 위해 무엇을 설정해야 할까요? [CORS가 발생할 수 있는 3가지 시나리오](https://developer.mozilla.org/ko/docs/Web/HTTP/CORS)를 살펴보며 필요한 설정 정보를 알아보겠습니다.\n\n### 예비 요청 Preflight Request\n\n브라우저는 요청을 한 번에 보내지 않고 예비 요청을 보낸 후 본 요청을 보냅니다. 예비 요청은 본 요청을 보내기 전 브라우저가 안전한지 먼저 점검합니다. 교차 출처 요청이 사용자 데이터에 잘못된 영향을 미치는 것을 방지하기 위해서입니다.\n\n**OPTIONS 메서드**를 사용해 요청을 보내는 것이 특징입니다. OPTIONS는 서버로부터 추가 정보를 얻기 위해 사용되며 리소스를 변경할 수 없는 안전한 메서드입니다.\n\nOPTIONS 요청과 함께 두 개의 다른 요청 헤더가 전송됩니다.\n\n🔑 Client → 🔒 Server\n\n```java\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: content-type,x-pingother\n```\n\n🔒 Server → 🔑 Client\n\n```java\nAccess-Control-Allow-Origin: https://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\n```\n\n### 단순 요청 Simple Request\n\n일부 요청은 예비 요청을 보내지 않습니다. 심플한 만큼 다음의 특정 조건을 만족할 때만 예비 요청을 생략할 수 있습니다.\n\n- 요청 메서드가 GET, HEAD, POST 중 하나여야 합니다.\n- Accept , Accept-Language, Content-Language, Content-Type , Range 헤더만 설정할 수 있습니다.\n- application/x-www-form-urlencoded , multipart/form-data , text/plain 의 미디어 타입만 가능합니다.\n\n대부분의 API 요청은 application/json으로 통신하기 때문에 Content-Type에 위반되어 단순 요청 조건에 해당하지 않습니다.\n\n### 인증된 요청 **Credentialed Request**\n\n클라이언트에서 서버로 자격 증명을 요청할 때 사용되는 요청입니다. 자격 증명을 포함하기 위해서는 credentials 옵션을 \"include\" 로 설정해야 합니다.\n\n서버에서는 인증된 요청에 대한 헤더를 다음과 같이 설정해야 합니다. 응답 헤더 값을 “\\*” 와일드카드로 지정해서는 안 됩니다.\n\n```java\nAccess-Control-Allow-Origin : https://foo.example\nAccess-Control-Allow-Headers : X-PINGOTHER, Content-Type\nAccess-Control-Allow-Methods : POST, GET\nAccess-Control-Expose-Headers : Content-Encoding, Kuma-Revision\nAccess-Control-Allow-Credentials: true\n```\n\n## HTTP 요청 헤더\n\n서버가 접근 제어 요청을 위해 보낼 수 있는 HTTP 응답 헤더는 다음으로 정리할 수 있습니다.\n\n- Access-Control-Allow-Origin\n- Access-Control-Expose-Headers\n- Access-Control-Max-Age\n- Access-Control-Allow-Credentials\n- Access-Control-Allow-Methods\n- Access-Control-Allow-Headers\n\n## Spring으로 CORS 설정하기\n\nSpring에서 CORS 설정할 수 있는 방법은 [다음 블로그](https://www.baeldung.com/spring-cors)를 참고합니다.\n\n### 1. WebMvcConfigurer 사용\n\n스프링 MVC 구성에 CORS 관련 설정을 추가할 수 있습니다. 체이닝 방식을 통해 CorsRegistry을 구성할 수 있습니다.\n\n```java\n@Configuration\npublic class CorsConfigWithMVC implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"https://bang-ggood.com\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\")\n                .allowedHeaders(\"*\")\n                .allowCredentials(true);\n    }\n}\n\n```\n\n### 2. CorsFilter 사용\n\nSpring Security와 함께 정교하게 CORS를 설정할 수 있는 방법입니다. Spring Security를 사용하지 않을 때도 WebMvcConfigurer의 설정을 대체할 수 있습니다.\n\n```java\n@Configuration\npublic class CorsConfig {\n\n    @Bean\n    public CorsFilter corsFilter() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(\"https://bang-ggood.com\");\n        configuration.setAllowedMethods(List.of(\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\"));\n        configuration.addAllowedHeader(\"*\");\n        configuration.setAllowCredentials(true);\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n\n        return new CorsFilter(source);\n    }\n}\n```\n\n### DEV, PROD 에서의 CORS 설정\n\ndev와 prod 환경에서 출처를 다르게 설정할 수 있습니다. dev 환경에서는 localhost의 요청을 허용하지만, 실서비스가 운영되는 prod 환경에서는 이를 허용하면 안 되기 때문입니다. 이를 위해 application-prod.yml과 application-dev.yml 파일에 각각 허용 가능한 출처를 지정하고, 해당 값을 주입해 사용하는 방식으로 구현했습니다.\n\n```java\n@Configuration\n@ConfigurationProperties(prefix = \"cors\")\npublic class CorsConfig {\n\n    private List<String> allowOrigins;\n\n    @Bean\n    public CorsFilter corsFilter() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(allowOrigins);\n        configuration.setAllowedMethods(List.of(\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\"));\n        configuration.addAllowedHeader(\"*\");\n        configuration.setAllowCredentials(true);\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n\n        return new CorsFilter(source);\n    }\n\n    public List<String> getAllowOrigins() {\n        return allowOrigins;\n    }\n\n    public void setAllowOrigins(List<String> allowOrigins) {\n        this.allowOrigins = allowOrigins;\n    }\n}\n\n```\n"},{"excerpt":"우테코에서 레벨 3이 되면서 '방끗' 이라는 프로젝트를 진행했다. 방끗은\n다음과 같은 서비스이다. 우선 8주라는 시간동안 이 프로젝트를 어떤 과정으로 완성했는지, 간단하게 정리해보고자 한다.\n프로젝트는 각 2주동안 진행되는 4번의 스프린트로 진행되었다. 각 스프린트 때 진행한 내용은 다음과 같다. 1차 스프린트 (7/2 ~ 7/12) ☀️ 1차 스프린트때 …","fields":{"slug":"/script/"},"frontmatter":{"date":"July 20, 2024","title":"방끗 기획 및 프론트엔드의 시작","tags":["frontend","기획"]},"rawMarkdownBody":"\n![](https://velog.velcdn.com/images/roseis00/post/d03f6022-ecbe-4eb4-8fb2-6ba0c2d1c9cb/image.png)\n\n우테코에서 레벨 3이 되면서 '방끗' 이라는 프로젝트를 진행했다. 방끗은\n다음과 같은 서비스이다.\n\n```\n방을 구할 때 쉽게 체크리스트를 작성할 수 있는 서비스\n```\n\n우선 8주라는 시간동안 이 프로젝트를 어떤 과정으로 완성했는지, 간단하게 정리해보고자 한다.\n프로젝트는 각 2주동안 진행되는 4번의 스프린트로 진행되었다. 각 스프린트 때 진행한 내용은 다음과 같다.\n\n## 1차 스프린트 (7/2 ~ 7/12)\n\n☀️ 1차 스프린트때 한 일\n\n- 프로젝트 기획\n- 팀 문화 세우기\n- 유저 시나리오 생성 및 기능 명세 작성\n- webpack 기반의 환경 프로젝트 기본 환경 세팅\n\n### 아이디어 회의\n\n1차 때 가장 시간을 많이 쓴 것은 아무래도 기획이다. 우리 팀은 다행히도 미리 팀원들이 아이디어를 생각해와서, 첫날부터 아이디어를 정하고 진행할 수 있었다. 치열한 아이디어 공방전 끝에, 다음과 같이 `부동산을 구할 떄 필요한 체크 리스트를 보여주는 사이트`로 아이디어가 정해지게 되었다!\n\n<img \nwidth=\"600px\"     src=\"https://velog.velcdn.com/images/roseis00/post/5f1ff33b-95dd-4916-b4c1-a8d87e87f48e/image.png\"/>\n\n나도 아이디어를 2-3개 정도 준비해 갔지만, 해당 아이디어가 재밌을 것 같았다. 비록 집 구해본 경험이 없었던 나였지만, 집을 구할 때 어려움을 느꼈던 팀원의 문제에 공감이 갔고 팀원들 중에 자취하는 사람들이 무려 5명이라 안심하고 해당 주제에 찬성했다!\n\n주제가 정해지고 나서는 밑과 같이 간단하게 아이디어 스케치도 하고 필요한 기능 목록들을 정리하기 시작했다.\n\n<img \nwidth=\"400px\"     src=\"https://velog.velcdn.com/images/roseis00/post/84f94f32-1d9a-47c1-b6a1-0733dc740556/image.png\"/>\n\n(초창기의 우리 팀의 마스코트의 방긋이는 좀 무섭게 생겼다..ㅋㅋ)\n\n지금 생각해보면 반영이 된 아이디어도, 안된 아이디어도 있지만 초반의 아이디어 루트를 많이 따라간 것 같다. 확실히 현재의 '방끗' 이 되기 까지는 기존의 치열한 기획 회의를 많이 거친 덕이 가장 큰 것 같다..😁\n\n<img \nwidth=\"400px\"     src=\"https://velog.velcdn.com/images/roseis00/post/daed1a1a-2b66-4d93-8323-29b1b28d164e/image.png\"/>\n\n### 브랜치 & PR & 이슈 전략\n\n우리는 gitflow 브랜치 전략을 차용하여 다음과 같은 브랜치 전략을 만들었다.\n\n<img \nwidth=\"400px\"     src=\"https://velog.velcdn.com/images/roseis00/post/0e1edf0d-10dc-4243-9d7d-40494f6eb6ef/image.png\"/>\n\n우선 작업을 하려면 다음과 같이 이슈를 하고, 해당 기능 브랜치는 이슈 번호를 붙여서 만든다. 예를 들어 `체크리스트 페이지 퍼블리싱` 이라는 기능을 해야 한다면, 해당 기능을 이슈로 파고 (#1)\n기능에 맞는 브랜치를 만들어 작업한다. (`feature/1-checklistStyle`)\n\n\b실제로 우리 프로젝트에 존재하는 브랜치들이다. 브랜치 명만 보아도, 해당 기능의 이슈 번호와 내용, 성격을 알 수 있어서 정말 편리한 방법이었다.👍\n\n<img \nwidth=\"330px\"     src=\"https://velog.velcdn.com/images/roseis00/post/c6c92ae2-a9cf-41f0-a483-224f8b8afea3/image.png\"/>\n\n또한 이슈와 PR 제목은 앞에 BE/FE 를 적고 `완성형 문장` 으로 적기로 하였다. 이것은 내가 건의했는데, 처음에는 팀원들이 어색해했지만 하다보니 가독성이 호평했다. 또한 라벨을 붙여 해당 PR 의 성격을 바로 알 수 있도록 하였다.\n\n![](https://velog.velcdn.com/images/roseis00/post/f0095a31-8c69-4d4f-84e3-61575648f344/image.png)\n\n또한 깃허브의 `projects` 기능을 사용해서, 현재 프로젝트의 진행 상황을 파악했다. 하지만 다른 컨벤션에 비해 이는 팀원들이 모두 익숙해지는데 시간이 걸렸다. 아무래도 이슈와 PR 을 투두 리스트로 같이 활용하는 방식에 대해 익숙하지 않아서인 듯 하다.\n\n![](https://velog.velcdn.com/images/roseis00/post/9aa748b4-b664-4ea0-af14-b932b689267f/image.png)\n\n나중에 규모가 큰 프로젝트를 한다면`linear` 를 사용해서 이슈 관리를 하는 것이 좋겠다는 생각이 들었다. 예전에 linear를 사용해서 battleTalk 이라는 프로젝트를 만들었을 때 매우 편리했었기 때문이다.\n\n### 가장 후회되는 것 - 핵심 기능 정리\n\n새로운 프로젝트를 기획할 때 가장 중요한 것이 무엇일까? 많은 것들이 떠오르겠지만, 내가 '방끗' 프로젝트를 하면서 느낀 것은 `핵심 기능 정리` 만큼 중요한 것이 없다는 것이다. 핵심 기능이란 여러개가 아닌 딱 하나, 우리가 `이 서비스를 통해 사용자에게 어떤 가치를 전달하고 싶은가?` 이다.\n\n우리 방끗 팀도 이에 대해 많은 고민을 했었고, 중간부터는 욕심이 점점 많아져 다른 새로운 기능 아이디어들이 추가되면서 길을 잃기도 했었다.\n\n우리는 다음과 같은 서비스를 기획했는데\n\n> 방을 구할 때 쉽게 체크리스트를 작성할 수 있는 서비스\n\n회의를 거듭하고 시간이 지나고 보니\n\n> 방을 구할 때 쉽게 체크리스트를 작성할 수 있는데,\n> 지도에 매물별로 다른 사람들의 체크리스트도 확인할 수 있고,\n> 그 매물에 대한 다른 사람들의 실거주 후기도 볼 수 있는\n> 아주 다양한 기능을 제공하는 서비스\n\n위와 같은 기획 목적을 파악하기 힘든 서비스가 되어 버렸다.\n이에 대해서 팀끼리 많은 고민을 하고, 코치들과 의견을 많이 주고 받은 결과\n우리의 기획 목적인 `방을 구할 때 도움을 주는 체크리스트 기능` 에 집중하기로 했고,\n지금의 방끗이 탄생한 것이다.\n\n사실 우리끼리도 이것이 최우선 과제라는 것을 무의식중에 알고 있었다. 바로 처음 기능으로 정의한 것이 `방을 구할 때 도움을 주는 체크리스트 기능` 이었으니까...!!\n\n<img \nwidth=\"400px\" src=\"blob:https://velog.io/99c989cf-c31e-4368-bde2-a777311385e9\"/>\n\n위와 같이 체크리스트에 들어갈 질문들을 많이 고민했는데, 우리의 서비스의 가치는 이 체크리스트의 질문의 퀄리티에서 결정이 된다고 생각했기 때문이다.\n\n지금 생각해보면, 이 기능에 대해 생각하고 회의한 시간은 아깝지 않은데, 이 외에 기능에 대해 얘기한 시간이 너무 아깝다..\n\n만약 프로젝트를 기획하거나, 처음 아이디어 스케치 단계에 있는 분이 계시다면\n\n> 어떤 가치가 사용자(소비자)에게 전달할 최우선 가치인가? 에 대해서 잘 생각해보시면 좋을 것 같다.\n\n그 외에 욕심이 나는 것들은 최우선 기능을 잘 만든 다음에, 기획해도 전혀 늦지 않기 때문이다!!\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}